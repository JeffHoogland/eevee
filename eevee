#!/usr/bin/python
# encoding: utf-8


from __future__ import print_function  # May as well bite the bullet

__author__ = "Jeff Hoogland"
__contributors__ = ["Jeff Hoogland", "Kai Huuhko", "Scimmia22"]
__copyright__ = "Copyright (C) 2014 Bodhi Linux"
__version__ = "0.1.0"
__description__ = 'A simple pdf reader for the Enlightenment Desktop.'
__github__ = 'http://jeffhoogland.github.io/eevee/'
__source__ = 'Source code and bug reports: {0}'.format(__github__)
PY_EFL = "https://git.enlightenment.org/bindings/python/python-efl.git/"

AUTHORS = """
<br>
<align=center>
<hilight>Jeff Hoogland (Jef91)</hilight><br>
<link><a href=http://www.jeffhoogland.com>Contact</a></link><br><br>

<hilight>Kai Huuhko (kukko)</hilight><br><br>
</align>
"""

LICENSE = """<br>
<align=center>
<hilight>
GNU GENERAL PUBLIC LICENSE<br>
Version 3, 29 June 2007<br><br>
</hilight>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.<br><br>

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.<br><br>

You should have received a copy of the GNU General Public License
along with this program. If not, see<br>
<link><a href=http://www.gnu.org/licenses>http://www.gnu.org/licenses/</a></link>
</align>
<br>
"""

INFO = """
<align=center>
<hilight>eeVee</hilight> is a simple pdf viewer written in Elementary and Python.<br>
<br>
<br>
</align>
"""


import argparse
import errno
import sys
import os
import time
import urllib
try:
    # Python3
    import urllib.request
except ImportError:
    pass
import re

from efl import ecore
from efl.evas import EVAS_HINT_EXPAND, EVAS_HINT_FILL
from efl import elementary
from efl.elementary.window import StandardWindow, Window
from efl.elementary.window import ELM_WIN_DIALOG_BASIC
from efl.elementary.background import Background
from efl.elementary.box import Box
from efl.elementary.button import Button
from efl.elementary.label import Label, ELM_WRAP_WORD
from efl.elementary.icon import Icon
from efl.elementary.need import need_ethumb
from efl.elementary.notify import Notify, ELM_NOTIFY_ALIGN_FILL
from efl.elementary.separator import Separator
from efl.elementary.scroller import Scroller, Scrollable
from efl.elementary.image import Image
from efl.elementary.frame import Frame
from efl.elementary.list import List
from efl.elementary.frame import Frame
from efl.elementary.entry import Entry, ELM_TEXT_FORMAT_PLAIN_UTF8, \
        markup_to_utf8, utf8_to_markup, ELM_WRAP_NONE, ELM_WRAP_MIXED
from efl.elementary.popup import Popup
from efl.elementary.toolbar import Toolbar, ELM_OBJECT_SELECT_MODE_DEFAULT
from efl.elementary.flip import Flip, ELM_FLIP_ROTATE_XZ_CENTER_AXIS, \
        ELM_FLIP_ROTATE_YZ_CENTER_AXIS, ELM_FLIP_INTERACTION_ROTATE
from efl.elementary.table import Table
from efl.elementary.transit import Transit, \
        ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE, ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT
from efl.elementary.check import Check
from efl.evas import EVAS_HINT_EXPAND, EVAS_HINT_FILL
from efl.elementary.naviframe import Naviframe
from efl.elementary.panes import Panes
from efl.elementary.list import List
from efl.ecore import Exe
from efl.elementary.genlist import Genlist, GenlistItem, GenlistItemClass, \
        ELM_GENLIST_ITEM_SCROLLTO_MIDDLE, ELM_OBJECT_SELECT_MODE_NONE, ELM_LIST_EXPAND

import efl.evas as evas
evas.init()
from efl.evas import FilledImage

import PyPDF2

# Imported here to stop class resolver complaining when an input event
# applies to an internal layout object
from efl.elementary.layout import Layout

from elmextensions import AboutWindow
from elmextensions import FileSelector

EXPAND_BOTH = EVAS_HINT_EXPAND, EVAS_HINT_EXPAND
EXPAND_HORIZ = EVAS_HINT_EXPAND, 0.0
FILL_BOTH = EVAS_HINT_FILL, EVAS_HINT_FILL
FILL_HORIZ = EVAS_HINT_FILL, 0.5
EXPAND_NONE = 0.0, 0.0
ALIGN_CENTER = 0.5, 0.5
ALIGN_RIGHT = 1.0, 0.5
ALIGN_LEFT = 0.0, 0.5
PADDING = 15, 0
# User options
WORD_WRAP = ELM_WRAP_NONE
SHOW_POS = True
NOTIFY_ROOT = True
SHOW_HIDDEN = False
NEW_INSTANCE = True

def printErr(*objs):
    print(*objs, file=sys.stderr)

def errorPopup(window, errorMsg):
    errorPopup = Popup(window, size_hint_weight=EXPAND_BOTH)
    errorPopup.callback_block_clicked_add(lambda obj: errorPopup.delete())

    # Add a table to hold dialog image and text to Popup
    tb = Table(errorPopup, size_hint_weight=EXPAND_BOTH)
    errorPopup.part_content_set("default", tb)
    tb.show()

    # Add dialog-error Image to table
    need_ethumb()
    icon = Icon(errorPopup, thumb='True')
    icon.standard_set('dialog-warning')
    # Using gksudo or sudo fails to load Image here
    #   unless options specify using preserving their existing environment.
    #   may also fail to load other icons but does not raise an exception
    #   in that situation.
    # Works fine using eSudo as a gksudo alternative,
    #   other alternatives not tested
    try:
        dialogImage = Image(errorPopup,
                            size_hint_weight=EXPAND_HORIZ,
                            size_hint_align=FILL_BOTH,
                            file=icon.file_get())
        tb.pack(dialogImage, 0, 0, 1, 1)
        dialogImage.show()
    except RuntimeError:
        # An error message is displayed for this same error
        #   when aboutWin is initialized so no need to redisplay.
        pass
    # Add dialog text to table
    dialogLabel = Label(errorPopup, line_wrap=ELM_WRAP_WORD,
                        size_hint_weight=EXPAND_HORIZ,
                        size_hint_align=FILL_BOTH)
    dialogLabel.text = errorMsg
    tb.pack(dialogLabel, 1, 0, 1, 1)
    dialogLabel.show()

    # Ok Button
    ok_btt = Button(errorPopup)
    ok_btt.text = "Ok"
    ok_btt.callback_clicked_add(lambda obj: errorPopup.delete())
    ok_btt.show()

    # add button to popup
    errorPopup.part_content_set("button3", ok_btt)
    errorPopup.show()

#A hack to work around elm keypress sucking a fat one
def threeCount(ourCallback):
    if not hasattr(threeCount, 'count'):
        threeCount.count = 0
    if threeCount.count == 0:
        ourCallback()
    #print(threeCount.count)
    threeCount.count = (threeCount.count + 1) % 3

def closeMenu(obj, label):
    if not hasattr(closeMenu, 'count'):
        closeMenu.count = 0
    if not hasattr(closeMenu, 'name'):
        closeMenu.lastItem = label
    if closeMenu.lastItem != label:
        closeMenu.count = 0
    if closeMenu.count:
        obj.selected_set(False)
        obj.menu_get().close()
    closeMenu.count = (closeMenu.count + 1) % 2


def resetCloseMenuCount(obj):
        global closeMenu
        if hasattr(closeMenu, 'count'):
            closeMenu.count = 0


class Interface(object):
    def __init__(self):
        self.isSaved = True
        self.isNewFile = False
        self.confirmPopup = None
        self.lineNums = True

        self.mainWindow = StandardWindow("eevee", "eeVee",
                                         size=(600, 400))
        self.mainWindow.callback_delete_request_add(self.closeChecks)
        self.mainWindow.elm_event_callback_add(self.eventsCb)
        #self.mainWindow.repeat_events_set(False)

        icon = Icon(self.mainWindow,
                    size_hint_weight=EXPAND_BOTH,
                    size_hint_align=FILL_BOTH)
        icon.standard_set('accessories-document-viewer')
        icon.show()
        self.mainWindow.icon_object_set(icon.object_get())

        self.mainBox = Box(self.mainWindow,
                           size_hint_weight=EXPAND_BOTH,
                           size_hint_align=FILL_BOTH)
        self.mainBox.show()

        self.newInstance = NEW_INSTANCE
        self.mainTb = eeVeeToolbar(self, self.mainWindow)
        self.mainTb.focus_allow = False
        self.mainTb.show()

        self.mainBox.pack_end(self.mainTb)

        self.findBox = eeVeeFindBox(self, self.mainWindow)
        self.findVisible = False

        self.scr = Scroller(self.mainBox,
                           size_hint_weight=EXPAND_HORIZ,
                           size_hint_align=FILL_BOTH)
        self.scr.content_min_limit(False, True)

        self.buttonBox = Box(self.scr,
                           size_hint_weight=EXPAND_HORIZ,
                           size_hint_align=ALIGN_LEFT)
        self.buttonBox.horizontal = True
        self.buttonBox.show()

        self.scr.content = self.buttonBox
        self.scr.show()

        self.mainBox.pack_end(self.scr)

        self.nf = Naviframe(self.mainWindow,
                               size_hint_weight=EXPAND_BOTH,
                               size_hint_align=FILL_BOTH)
        self.nf.show()

        self.fileEntries = []

        self.mainBox.pack_end(self.nf)

        # Build our file selector for saving/loading files
        self.fileBox = Box(self.mainWindow,
                           size_hint_weight=EXPAND_BOTH,
                           size_hint_align=FILL_BOTH)
        self.fileBox.show()

        self.fileLabel = Label(self.mainWindow,
                               size_hint_weight=EXPAND_HORIZ,
                               size_hint_align=FILL_BOTH, text="")
        self.fileLabel.show()
        self.lastDir = os.getenv("HOME")
        self.fileSelector = FileSelector(self.mainWindow,
                                         defaultPath=self.lastDir,
                                         defaultPopulate=False,
                                         size_hint_weight=EXPAND_BOTH,
                                         size_hint_align=FILL_BOTH)
        self.fileSelector.callback_activated_add(self.fileSelected)
        self.fileSelector.callback_directory_open_add(self.updateLastDir)
        self.fileSelector.callback_cancel_add(self.fileSelCancelPressed)
        self.fileSelector.setMode("Open")
        self.fileSelector.show()

        self.fileBox.pack_end(self.fileLabel)
        self.fileBox.pack_end(self.fileSelector)

        # Flip object has the file selector on one side
        #   and the GUI on the other
        self.flip = Flip(self.mainWindow, size_hint_weight=EXPAND_BOTH,
                         size_hint_align=FILL_BOTH)
        self.flip.part_content_set("front", self.mainBox)
        self.flip.part_content_set("back", self.fileBox)
        self.mainWindow.resize_object_add(self.flip)
        self.flip.show()

    def addFile(self, filePath):
        entryBox = FileObject(self, filePath)
        entryBox.show()

        self.fileEntries.append(entryBox)

        self.nf.item_simple_push(entryBox)

        btn = Button(self.buttonBox, style="anchor")
        btn.text = filePath.split("/")[-1]
        btn.data["entry"] = entryBox
        btn.callback_clicked_add(self.showFile)
        btn.show()

        icn = Icon(self.mainWindow)
        icn.standard_set("gtk-close")
        icn.show()

        cls = Button(self.buttonBox, content=icn, style="anchor")
        cls.data["entry"] = entryBox
        cls.callback_clicked_add(self.closeFile)
        cls.show()

        sep = Separator(self.buttonBox)
        sep.show()

        self.buttonBox.pack_end(btn)
        self.buttonBox.pack_end(cls)
        self.buttonBox.pack_end(sep)

        #Arguments go: btn, cls, sep
        entryBox.setWidgets(btn, cls, sep)

        self.setFile(entryBox, btn.text)

    def setFile(self, entryBox, winTitle):
        self.nf.item_simple_push(entryBox)
        self.mainWindow.title = "%s - eeVee" % (winTitle)
        self.entryBox = entryBox

    def closeFile(self, btn, altBtn=False, forceClose=False):
        if altBtn:
            btn = altBtn

        self.buttonBox.unpack(btn.data["entry"].close)
        self.buttonBox.unpack(btn.data["entry"].button)
        self.buttonBox.unpack(btn.data["entry"].sep)

        self.fileEntries.remove(btn.data["entry"])

        if len(self.fileEntries):
            if self.entryBox == btn.data["entry"]:
                self.setFile(self.fileEntries[0], self.fileEntries[0].button.text)

        btn.data["entry"].button.delete()
        btn.data["entry"].close.delete()
        btn.data["entry"].sep.delete()
        btn.data["entry"].delete()
        
    def showFile(self, btn):
        if self.entryBox != btn.data["entry"]:
            self.setFile(btn.data["entry"], btn.text)

    def openFile(self, obj=None, ignoreSave=False):
        self.fileSelector.setMode("Open")
        self.fileLabel.text = "<b>Select a text file to open:</b>"
        if self.fileSelector.filepathEntry.text != self.lastDir:
            self.fileSelector.populateFiles(self.lastDir)
        self.flip.go(ELM_FLIP_ROTATE_YZ_CENTER_AXIS)

    def fileSelCancelPressed(self, fs):
        self.flip.go(ELM_FLIP_ROTATE_XZ_CENTER_AXIS)

    def showFind(self, obj=None):
        if not self.findVisible:
            self.mainBox.pack_before(self.findBox, self.scr)
            self.findBox.findEntry.text = self.entryBox.mainEn.selection_get()
            self.findBox.findEntry.focus_set(True)
            self.findBox.findEntry.cursor_end_set()
            self.findBox.show()
            self.findVisible = True
        else:
            self.hideFind()

    def hideFind(self, obj=None):
        if self.findVisible:
            self.mainBox.unpack(self.findBox)
            self.findBox.hide()
            self.findVisible = False

    def fileSelected(self, fs, file_selected, onStartup=False):
        if not onStartup:
            self.flip.go(ELM_FLIP_ROTATE_XZ_CENTER_AXIS)
            # Markup can end up in file names because file_selector name_entry
            #   is an elementary entry. So lets sanitize file_selected.
            file_selected = markup_to_utf8(file_selected)
        if file_selected:
            print("File Selected: {0}".format(file_selected))
            self.lastDir = os.path.dirname(file_selected)
            # This fails if file_selected does not exist yet

            fs.fileEntry.text = file_selected.split("/")[-1]

        if file_selected:
            self.addFile(file_selected)

    def updateLastDir(self, path):
        self.lastDir = path

    def showAbout(self):
        self.about.launch()

    def closeApp(self, obj=False, trash=False):
        elementary.exit()

    def closeChecks(self, obj=False):
        self.closeApp()

    def closePopup(self, bt, confirmPopup):
        self.confirmPopup.delete()
        self.confirmPopup = None

    def eventsCb(self, obj, src, event_type, event):
        #print(obj)
        #print(src)
        #print(event.key.lower())
        #print(event_type)
        #print("")

        try:
            event.key
        except:
            return False

        if event.modifier_is_set("Control"):
            if event.key.lower() == "o":
                self.openFile()
            elif event.key.lower() == "h":
                if not self.flip.front_visible_get():
                    #toggleHidden(self.fileSelector)
                    threeCount(self.fileSelector.toggleHidden)
            elif event.key.lower() == "q":
                #closeCtrlChecks(self)
                threeCount(self.closeChecks)
            elif event.key.lower() == "f":
                #toggleFind(self)
                pass
                #threeCount(self.showFind)

    def launch(self, start=[]):
        if start[0]:
            for count, ourFile in enumerate(start[0]):
                if os.path.dirname(ourFile) == '':
                    start[0][count] = os.getcwd() + '/' + ourFile

        if start and start[0]:
            for ourFile in start[0]:
                if ourFile[:7] == "file://":
                    try:
                        ourFile = urllib.url2pathname(ourFile[7:])
                    except AttributeError:
                        # Python3
                        ourFile = urllib.request.url2pathname(ourFile[7:])
                if os.path.isdir(os.path.dirname(ourFile)):
                    if os.path.isfile(ourFile):
                        #print(ourFile)
                        self.addFile(ourFile)
                else:
                    print("Error: {0} is an Invalid Path".format(ourFile))
                    errorMsg = ("<b>'%s'</b> is an Invalid path."
                                "<br><br>Open failed !!!" % (ourFile))
                    errorPopup(self.mainWindow, errorMsg)
        if start and start[1]:
            if os.path.isdir(start[1]):
                print("Initializing file selection path: {0}".format(start[1]))
                self.lastDir = start[1]
            else:
                print("Error: {0} is an Invalid Path".format(start[1]))
        
        self.mainWindow.show()

class FileObject(Box):
    def __init__(self, parent, imageFile):
        Box.__init__(self, parent.mainWindow, size_hint_align=FILL_BOTH, size_hint_weight=EXPAND_BOTH)
        
        self.rent = parent
        
        self.gl = ScrollableGenlist(self, size_hint_align=FILL_BOTH, size_hint_weight=EXPAND_BOTH)
        self.gl.callback_scroll_add(self.glMoved)
        self.gl.callback_realized_add(self.glMoved)
        self.gl.select_mode_set(ELM_OBJECT_SELECT_MODE_NONE)
        #self.gl.mode_set(ELM_LIST_EXPAND)
        self.gl.show()
        
        self.glItems = []
        self.zoomFactor = 1.0
        self.currentPage = 1
        self.bookmarks = []
        self.bkList = None
        
        #self.ourPdf = PyPDF2.PdfFileReader(imageFile)
        self.ourPdf = PdfOutline(open(imageFile, 'rb'))
        self.pageCount = self.ourPdf.getNumPages()
        
        if len(self.ourPdf.getOutlines()):
            bktmp = self.ourPdf.getDestinationPageNumbers()
            for bk in bktmp:
                self.bookmarks.append([bktmp[bk], bk])
            self.bookmarks.sort()
        else:
            self.bookmarks = None
        
        #print(self.bookmarks)
        
        def gl_text_get(obj, part, item_data):
            return item_data

        def gl_content_get(obj, part, data):
            img = FilledImage(self.evas)

            img.file = (imageFile, str(data[0]))
            img.size_hint_min = (img.image_size[0] * self.zoomFactor, img.image_size[1] * self.zoomFactor)
            img.size_hint_max = (img.image_size[0] * self.zoomFactor, img.image_size[1] * self.zoomFactor)
            
            # XXX: Hack, the only way that a pdf seems to load with more dpi is to give
            #      a bogus value in load_dpi and the desired value in load_size
            img.load_dpi = 1
            img.load_size = img.image_size[0] * self.zoomFactor, img.image_size[1] * self.zoomFactor
            return img

        def gl_state_get(obj, part, item_data):
            return False

        itc1 = GenlistItemClass(item_style="full",
                                text_get_func=gl_text_get,
                                content_get_func=gl_content_get,
                                state_get_func=gl_state_get)
        
        for i in range(self.pageCount):
            glItem = self.gl.item_append(itc1, [i, 1.0] )
            self.glItems.append(glItem)
        
        bbox = Box(self)
        bbox.horizontal = True
        bbox.show()
        
        lbl1 = Label(self)
        lbl1.text = "Page "
        lbl1.show()
        
        self.pageNumEntry = Entry(self)
        self.pageNumEntry.single_line_set(True)
        self.pageNumEntry.text = "1"
        self.pageNumEntry.callback_activated_add(self.pageNumEnter)
        self.pageNumEntry.show()
        
        lbl2 = Label(self)
        lbl2.text = " of %s"%self.pageCount
        lbl2.show()
        
        bbox.pack_end(lbl1)
        bbox.pack_end(self.pageNumEntry)
        bbox.pack_end(lbl2)
        
        if self.bookmarks:
            panes = Panes(self, content_left_size=0.3,
                      size_hint_weight=EXPAND_BOTH, size_hint_align=FILL_BOTH)
            panes.show()
            
            self.bkList = List(self)
            
            for bk in self.bookmarks:
                lbl = Label(self)
                lbl.text = str(bk[0])
                lbl.show()
                it = self.bkList.item_append(bk[1], end=lbl)
                it.data["page"] = bk[0]+1
            
            self.bkList.callback_activated_add(self.bookmarkDoubleClicked)
            self.bkList.go()
            self.bkList.show()
            
            panes.part_content_set("left", self.bkList)
            panes.part_content_set("right", self.gl)
            
            self.pack_end(panes)
        else:
            self.pack_end(self.gl)
        self.pack_end(bbox)
    
    def bookmarkDoubleClicked(self, obj, item=None, eventData=None):
        self.pageNumEnter(newPage=item.data["page"])
    
    def pageNumEnter(self, obj=None, newPage=None):
        if not newPage:
            try:
                newPage = int(obj.text)
            except:
                obj.text = str(self.currentPage)
                return
        
        if newPage <= self.pageCount:
            self.glItems[newPage -1].bring_in(ELM_GENLIST_ITEM_SCROLLTO_MIDDLE)
        else:
            obj.text = str(self.currentPage)
    
    def glMoved(self, obj=None, item=None, curPage=None):
        items = self.gl.realized_items_get()
        for i in items:
            if i.data[1] != self.zoomFactor:
                i.update()
                i.data[1] = self.zoomFactor
        
        item = items[(len(items)+1)/2 - 1]
        if not isinstance( curPage, int  ):
            curPage = item.data_get()[0] + 1
        self.currentPage = curPage
        self.pageNumEntry.text = str(curPage)
        
        self.rent.mainTb.checkButtons()
    
    def previousPage(self, obj=None):
        self.glMoved(curPage=self.currentPage-1)
        self.glItems[self.currentPage - 1].bring_in(ELM_GENLIST_ITEM_SCROLLTO_MIDDLE)
        
    def nextPage(self, obj=None):
        self.glMoved(curPage=self.currentPage)
        self.glItems[self.currentPage].bring_in(ELM_GENLIST_ITEM_SCROLLTO_MIDDLE)
        
    def zoomIncrease(self, obj=None):
        self.zoomFactor += 0.2
        self.pageHeightUpdate()
    
    def zoomDecrease(self, obj=None):
        self.zoomFactor -= 0.2
        self.zoomFactor = max(self.zoomFactor, 0.2)
        self.pageHeightUpdate()
    
    def pageHeightUpdate(self):
        items = self.gl.realized_items_get()
        for i in items:
            if i.data[1] != self.zoomFactor:
                i.update()
                i.data[1] = self.zoomFactor
            
    def setWidgets(self, btn, cls, sep):
        self.button = btn
        self.close = cls
        self.sep = sep

class PdfOutline(PyPDF2.PdfFileReader):
    """getDestinationPageNumbers allows us to return bookmarks
        with page numbers in a pdf"""
    def getDestinationPageNumbers(self):

        def _setup_outline_page_ids(outline, _result=None):
            if _result is None:
                _result = {}
            for obj in outline:
                if isinstance(obj, PyPDF2.pdf.Destination):
                    _result[(id(obj), obj.title)] = obj.page.idnum
                elif isinstance(obj, list):
                    _setup_outline_page_ids(obj, _result)
            return _result

        def _setup_page_id_to_num(pages=None, _result=None, _num_pages=None):
            if _result is None:
                _result = {}
            if pages is None:
                _num_pages = []
                pages = self.trailer["/Root"].getObject()["/Pages"].getObject()
            t = pages["/Type"]
            if t == "/Pages":
                for page in pages["/Kids"]:
                    _result[page.idnum] = len(_num_pages)
                    _setup_page_id_to_num(page.getObject(), _result, _num_pages)
            elif t == "/Page":
                _num_pages.append(1)
            return _result

        outline_page_ids = _setup_outline_page_ids(self.getOutlines())
        page_id_to_page_numbers = _setup_page_id_to_num()

        result = {}
        for (_, title), page_idnum in outline_page_ids.items():
            if isinstance(title, PyPDF2.generic.TextStringObject):
                title = title.encode('utf-8')
            result[title] = page_id_to_page_numbers.get(page_idnum, '???')
        return result

class eeVeeFindBox(Box):
    def __init__(self, parent, canvas):
        Box.__init__(self, canvas)
        self._parent = parent
        self._canvas = canvas

        self.size_hint_weight = EXPAND_HORIZ
        self.size_hint_align = FILL_HORIZ

        self.currentFind = None
        self.lastSearch = None

        frameBox = Box(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        frameBox.horizontal = True
        frameBox.show()

        findBox = Frame(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        findBox.text = "Find Text:"
        findBox.show()

        self.findEntry = Entry(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        self.findEntry.single_line_set(True)
        self.findEntry.scrollable_set(True)
        self.findEntry.callback_activated_add(self.findPressed)
        self.findEntry.show()

        findBox.content = self.findEntry

        replaceBox = Frame(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        replaceBox.text = "Replace Text:"
        replaceBox.show()

        self.replaceEntry = Entry(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        self.replaceEntry.single_line_set(True)
        self.replaceEntry.scrollable_set(True)
        self.replaceEntry.show()

        replaceBox.content = self.replaceEntry

        frameBox.pack_end(findBox)
        frameBox.pack_end(replaceBox)

        buttonBox = Box(self._canvas, size_hint_weight=EXPAND_HORIZ, size_hint_align=FILL_HORIZ)
        buttonBox.horizontal = True
        buttonBox.show()

        findButton = Button(self._canvas)
        findButton.text = "Find Next"
        findButton.callback_pressed_add(self.findPressed)
        findButton.show()

        replaceButton = Button(self._canvas)
        replaceButton.text = "Replace All"
        replaceButton.callback_pressed_add(self.replacePressed)
        replaceButton.show()

        closeButton = Button(self._canvas)
        closeButton.text = "Done"
        closeButton.callback_pressed_add(self._parent.showFind)
        closeButton.show()

        self.caseCheck = Check(self._canvas)
        self.caseCheck.text = "Case Sensitive"
        self.caseCheck.show()

        buttonBox.pack_end(self.caseCheck)
        buttonBox.pack_end(findButton)
        buttonBox.pack_end(replaceButton)
        buttonBox.pack_end(closeButton)

        self.pack_end(frameBox)
        self.pack_end(buttonBox)

    def replacePressed(self, obj):
        tmp_text = markup_to_utf8(self._parent.entryBox.mainEn.entry_get())
        if not self.caseCheck.state_get():
            search_string = self.findEntry.text.lower()
            locations = list(self.findAll(tmp_text.lower(), search_string))
        else:
            search_string = self.findEntry.text
            locations = list(self.findAll(tmp_text, search_string))
        search_length = len(search_string)
        if search_length:
            replace_string = self.replaceEntry.text
            if replace_string:
                if len(locations):
                    if not self.caseCheck.state_get():
                        ourRe = re.compile(search_string, re.IGNORECASE)
                    else:
                        ourRe = re.compile(search_string)
                    tmp_text = ourRe.sub(replace_string, tmp_text).encode('utf-8').strip()
                    tmp_text = utf8_to_markup(tmp_text)
                    curPos = self._parent.entryBox.mainEn.cursor_pos_get()
                    self._parent.entryBox.mainEn.text_set(tmp_text)
                    try:
                        self._parent.entryBox.mainEn.cursor_pos_set(curPos)
                    except:
                        print("Error: Can't set cursor position")
                    self._parent.entryBox.textEdited()
                    self._parent.entryBox.takeSnapShot()
                else:
                    errorPopup(self._parent.mainWindow, "Text %s not found. Nothing replaced."%search_string)
            else:
                errorPopup(self._parent.mainWindow, "No replacement string entered.")
        else:
            errorPopup(self._parent.mainWindow, "No find string entered.")

    def findPressed(self, obj):
        if not self.caseCheck.state_get():
            search_string = self.findEntry.text.lower()
            tmp_text = markup_to_utf8(self._parent.entryBox.mainEn.entry_get()).lower()
        else:
            search_string = self.findEntry.text
            tmp_text = markup_to_utf8(self._parent.entryBox.mainEn.entry_get())
        search_length = len(search_string)
        if search_length:
            locations = list(self.findAll(tmp_text, search_string))
            if len(locations):
                if self.currentFind == None or search_string != self.lastSearch:
                    self.lastSearch = search_string
                    self.currentFind = locations[0]
                else:
                    lastFind = locations.index(self.currentFind)
                    if lastFind < len(locations)-1:
                        self.currentFind = locations[lastFind+1]
                    else:
                        self.currentFind = locations[0]
                self._parent.entryBox.mainEn.select_region_set(self.currentFind, self.currentFind+search_length)
            else:
                errorPopup(self._parent.mainWindow, "Text %s not found."%search_string)
        else:
            errorPopup(self._parent.mainWindow, "No find string entered.")

    def findAll(self, a_str, sub):
        start = 0
        while True:
            start = a_str.find(sub, start)
            if start == -1: return
            yield start
            start += len(sub) + 1


class eeVeeToolbar(Toolbar):
    def __init__(self, parent, canvas):
        Toolbar.__init__(self, canvas)
        self._parent = parent
        self._canvas = canvas

        self.homogeneous = False
        self.size_hint_weight = (0.0, 0.0)
        self.size_hint_align = (EVAS_HINT_FILL, 0.0)
        self.select_mode = ELM_OBJECT_SELECT_MODE_DEFAULT
        self.icon_size_set(16)
        self.callback_clicked_add(self.itemClicked)

        self.menu_parent = canvas

        self.item_append("document-open", "Open",
                         lambda self, obj: self._parent.openFile())
        self.pBtn = self.item_append("previous", "Preivious Page",
                         lambda self, obj: self._parent.entryBox.previousPage())
        self.pBtn.disabled = True
        self.nBtn = self.item_append("next", "Next Page",
                         lambda self, obj: self._parent.entryBox.nextPage())
        self.nBtn.disabled = True
        self.item_append("zoom-in", "Zoom In",
                         lambda self, obj: self._parent.entryBox.zoomIncrease())
        self.item_append("zoom-out", "Zoom Out",
                         lambda self, obj: self._parent.entryBox.zoomDecrease())
        #self.item_append("gtk-find", "Find",
        #                 lambda self, obj: self._parent.showFind())
        # -----------------------
        #
        # -- Options Dropdown Menu --
        #
        # self.item_append("settings", "Options", self.optionsPress)

        # ---------------------------

        self.item_append("dialog-information", "About",
                         self.showAbout)

    def checkButtons(self):
        en = self._parent.entryBox
        
        items = en.gl.realized_items_get()
        
        firstItem = items[0]
        lastItem = items[len(items)-1]
        
        if firstItem.data_get()[0] + 1 == 1:
            self.pBtn.disabled = True
        else:
            self.pBtn.disabled = False
        
        if lastItem.data_get()[0] + 1 == en.pageCount:
            self.nBtn.disabled = True
        else:
            self.nBtn.disabled = False

    def showAbout(self, obj, it):
        AboutWindow(self, title="eeVee", standardicon="accessories-document-viewer", \
                        version=__version__, authors=AUTHORS, \
                        licen=LICENSE, webaddress=__github__, \
                        info=INFO)

    def copyPress(self, obj, it):
        self._parent.entryBox.mainEn.selection_copy()
        resetCloseMenuCount(None)

    def itemClicked(self, obj):
        item = obj.selected_item_get()
        if item.menu_get() is None and item.selected_get():
            item.selected_set(False)
        elif item.menu_get():
            closeMenu(item, item.text_get())

    def selectAllPress(self, obj, it):
        self._parent.entryBox.mainEn.select_all()
        resetCloseMenuCount(None)

class ScrollableGenlist(Genlist, Scrollable):
    def __init__(self, *args, **kwargs):
        Genlist.__init__(self, *args, **kwargs)

if __name__ == "__main__":

    ourFiles = sys.argv

    #Remove eeVee.py from the arguments
    del ourFiles[0]

    #print(ourFiles)

    # Start App
    elementary.init()
    GUI = Interface()
    if ourFiles:
        print("Opening files: '{0}'".format(ourFiles))
        GUI.launch([ourFiles, None])
    else:
        GUI.launch([None, os.getcwd()])
    elementary.run()

    # Shutdown App
    elementary.shutdown()

